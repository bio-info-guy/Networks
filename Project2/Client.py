# -*- coding: utf-8 -*-
"""clientCLI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BLYYun5gHTNXI4AZsJGx6PVChV1Eqpro
"""
import SR_client as sr
import GBN_client as gbn
import socket
import sys
import math

def SRclient(sock, file, maxseqnum, windowsize, timeout, segmentsize, Package_No):
  Process_File = sr.ProcessFile(file, segmentsize, maxseqnum, Package_No)
  segmentedFile=Process_File.fragmentList()
  Ack_Reciever=sr.AckReciever(sock, 2048, maxseqnum)
  Send_Segments = sr.SendSegments(sock, segmentedFile, timeout, windowsize)
  Ack_Reciever.start()
  Send_Segments.start()
  Send_Segments.join()
  sr.SendComplete=True
  Ack_Reciever.join()

def GBNclient(sock, file, maxseqnum, windowsize, timeout, segmentsize, Package_No):
  Process_File = gbn.ProcessFile(file, segmentsize, maxseqnum, Package_No)
  segmentedFile=Process_File.fragmentList()
  Ack_Reciever=gbn.AckReciever(sock, 2048, maxseqnum)
  Send_Segments = gbn.SendSegments(sock, segmentedFile, timeout, windowsize)
  Ack_Reciever.start()
  Send_Segments.start()
  Send_Segments.join()
  gbn.SendComplete=True
  Ack_Reciever.join()
  
if __name__ == "__main__":
  try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    arguments = sys.argv[1:]
    file = arguments[0] 
    port = arguments[1]
    Package_No = arguments[2]
    with open(file,"r") as f:
      Protocol = f.readline().rstrip()
      Numbers = f.readline().split(" ")
      Sequence_number_bits = Numbers[0]
      Window_size = int(Numbers[1])
      timeout = int(f.readline())/100
      Size_of_segment = int(f.readline())
    maxseqnum = int(math.pow(2, int(Sequence_number_bits)))
    s.bind((socket.gethostbyname("localhost"),int(port)))
    if Protocol == "SR":
      if Window_size > math.pow(2, float(Sequence_number_bits) - 1):
        print ("Invalid window size! Use default instead!")
        Window_size = math.pow(2, float(Sequence_number_bits) - 1)
      SRclient(s,file, maxseqnum, Window_size, 4, Size_of_segment,Package_No)
    elif Protocol == "GBN":
      if Window_size > math.pow(2, float(Sequence_number_bits)) - 1:
        print ("Invalid window size! Use default instead!")
        Window_size = math.pow(2, float(Sequence_number_bits)) - 1
      GBNclient(s,file, maxseqnum ,Window_size, 4, Size_of_segment,Package_No)
  except:
    print ("Tere's some error! Please see README.txt for usage!")
    sys.exit(1)