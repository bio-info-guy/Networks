# -*- coding: utf-8 -*-
"""serverCLI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TttwfW6JdGlwcUv9rfPxOTHqW9WJ4Gum
"""

import SR_server as sr
#from GBN_server import *
import GBN_server as gbn
import socket
import sys
import math
def SRserver(sock, maxseqnum, windowsize, timeout, segmentsize):
  Reciever = sr.PackageReciever(recievesock=sock, maxseqnum=maxseqnum, maxwdsize=windowsize, timeout=5, buffersize = 2048,dropACKprobs=0.05)
  Reciever.start()
def GBNserver(sock, maxseqnum, windowsize, timeout, segmentsize):
  Reciever = gbn.PackageReciever(recievesock=sock, maxseqnum=maxseqnum, maxwdsize=windowsize,timeout=5, buffersize = 2048,dropACKprobs=0.05)
  Reciever.start()

if __name__ == "__main__":
  try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  
    arguments = sys.argv[1:]
    file = arguments[0] 
    port = int(arguments[1])
    s.bind(('', port))
    with open(file,"r") as f:
      Protocol = f.readline().rstrip()
      Numbers = f.readline().split(" ")
      Sequence_number_bits = Numbers[0]
      Window_size = Numbers[1]
      timeout = int(f.readline())/100
      Size_of_segment = f.readline()
    maxseqnum = math.pow(2, float(Sequence_number_bits))
    if Protocol == "SR":
      if Window_size > math.pow(2, float(Sequence_number_bits) - 1):
        print ("Invalid window size! Use default instead!")
        Window_size = math.pow(2, float(Sequence_number_bits) - 1)
      SRserver(s,maxseqnum ,Window_size, 4, Size_of_segment)
    elif Protocol == "GBN":
      if Window_size > math.pow(2, float(Sequence_number_bits)) - 1:
        print ("Invalid window size! Use default instead!")
        Window_size = math.pow(2, float(Sequence_number_bits)) - 1
      GBNserver(s,maxseqnum ,Window_size, 4, Size_of_segment)
  except:
    print ("Tere's some error! Please see README.txt for usage!")
    sys.exit(1)      